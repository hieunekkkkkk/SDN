// LandingPage.js v·ªõi API t√≠ch h·ª£p
import React, { useState, useEffect } from 'react';
import '../../index.css';
import Footer from '../../components/Footer';

// API configuration
const API_BASE_URL = 'http://localhost:3000/api';

// API helper function
const apiRequest = async (endpoint, options = {}) => {
  const url = `${API_BASE_URL}${endpoint}`;
  const config = {
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
    ...options,
  };

  try {
    const response = await fetch(url, config);
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    return await response.json();
  } catch (error) {
    console.error('API request failed:', error);
    throw error;
  }
};

function LandingPage() {
  const [selectedCategory, setSelectedCategory] = useState(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [businesses, setBusinesses] = useState([]);
  const [categories, setCategories] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [filteredBusinesses, setFilteredBusinesses] = useState([]);

  // Load data t·ª´ API khi component mount
  useEffect(() => {
    loadInitialData();
  }, []);

  // Filter businesses khi selectedCategory thay ƒë·ªïi
  useEffect(() => {
    filterBusinessesByCategory();
  }, [selectedCategory, businesses]);

  const loadInitialData = async () => {
    try {
      setLoading(true);
      setError(null);
      
      // G·ªçi API ƒë·ªÉ l·∫•y d·ªØ li·ªáu
      const [businessesData, categoriesData] = await Promise.all([
        apiRequest('/business'),
        apiRequest('/category')
      ]);

      setBusinesses(businessesData || []);
      setCategories(categoriesData || []);
      setFilteredBusinesses(businessesData || []);
    } catch (error) {
      console.error('Error loading data:', error);
      setError('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i sau.');
      
      // Fallback to default data if API fails
      setBusinesses([]);
      setFilteredBusinesses([]);
    } finally {
      setLoading(false);
    }
  };

  const filterBusinessesByCategory = () => {
    if (!selectedCategory) {
      setFilteredBusinesses(businesses);
    } else {
      const filtered = businesses.filter(business => 
        business.business_category === selectedCategory
      );
      setFilteredBusinesses(filtered);
    }
  };

  const handleCategoryClick = (categoryName) => {
    setSelectedCategory(selectedCategory === categoryName ? null : categoryName);
  };

  const handleSearch = async (e) => {
    e.preventDefault();
    if (!searchQuery.trim()) {
      setFilteredBusinesses(businesses);
      return;
    }

    try {
      setLoading(true);
      
      // T√¨m ki·∫øm local first
      const filtered = businesses.filter(business => 
        business.business_name?.toLowerCase().includes(searchQuery.toLowerCase()) ||
        business.business_address?.toLowerCase().includes(searchQuery.toLowerCase()) ||
        business.business_category?.toLowerCase().includes(searchQuery.toLowerCase())
      );
      setFilteredBusinesses(filtered);
    } catch (error) {
      console.error('Error searching:', error);
      setError('L·ªói khi t√¨m ki·∫øm. Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setLoading(false);
    }
  };

  if (loading && businesses.length === 0) {
    return (
      <div className="app">
        <div style={{ textAlign: 'center', padding: '50px' }}>
          <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="app">
        <div style={{ textAlign: 'center', padding: '50px', color: 'red' }}>
          <p>{error}</p>
          <button onClick={loadInitialData} className="btn">
            Th·ª≠ l·∫°i
          </button>
        </div>
      </div>
    );
  }

  return (
    <>
      <div className="app">
        <SearchBar
          searchQuery={searchQuery}
          setSearchQuery={setSearchQuery}
          handleSearch={handleSearch}
        />

        <CategorySection
          selectedCategory={selectedCategory}
          handleCategoryClick={handleCategoryClick}
          categories={categories}
          businesses={businesses}
        />

        <h1>Kh√°m ph√° nh·ªØng ƒë·ªãa ƒëi·ªÉm ph·ªï bi·∫øn g·∫ßn b·∫°n</h1>

        <PopularPlaces 
          businesses={filteredBusinesses}
          loading={loading}
        />

        <HowItWorks />

        <WhatsHot businesses={businesses} />
      </div>

      <Footer />
    </>
  );
}

// C√°c component ph·ª•
function SearchBar({ searchQuery, setSearchQuery, handleSearch }) {
  return (
    <div className="search-container">
      <form className="search-box" onSubmit={handleSearch}>
        <input
          type="text"
          className="search-input"
          placeholder="T√¨m ki·∫øm ƒë·ªãa ƒëi·ªÉm"
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
        />
        <button type="submit" className="search-button">
          T√¨m ki·∫øm
        </button>
      </form>
    </div>
  );
}

function CategorySection({ selectedCategory, handleCategoryClick, categories, businesses }) {
  // Default categories
  const defaultCategories = [
    { name: 'Kh√°ch s·∫°n', icon: 'üè®' },
    { name: 'Gi·∫£i tr√≠', icon: 'üé≠' },
    { name: 'B·ªánh vi·ªán', icon: 'üè•' },
    { name: 'Nh√† h√†ng', icon: 'üçΩÔ∏è' },
    { name: 'C√¢y xƒÉng', icon: '‚õΩ' },
    { name: 'Mua s·∫Øm', icon: 'üõí' },
    { name: 'C√† ph√™', icon: '‚òï' },
    { name: 'C√¥ng vi√™n', icon: 'üèûÔ∏è' },
  ];

  // Category icons mapping
  const categoryIcons = {
    'Kh√°ch s·∫°n': 'üè®',
    'Gi·∫£i tr√≠': 'üé≠',
    'B·ªánh vi·ªán': 'üè•',
    'Nh√† h√†ng': 'üçΩÔ∏è',
    'C√¢y xƒÉng': '‚õΩ',
    'Mua s·∫Øm': 'üõí',
    'C√† ph√™': '‚òï',
    'C√¥ng vi√™n': 'üèûÔ∏è',
  };

  // L·∫•y unique categories t·ª´ businesses ho·∫∑c d√πng default
  let displayCategories = [];
  
  if (businesses && businesses.length > 0) {
    const businessCategories = [...new Set(businesses
      .map(business => business.business_category)
      .filter(cat => cat)
    )];
    
    displayCategories = businessCategories.map(cat => ({
      name: cat,
      icon: categoryIcons[cat] || 'üìç'
    }));
  }
  
  // N·∫øu kh√¥ng c√≥ categories t·ª´ API, d√πng default
  if (displayCategories.length === 0) {
    displayCategories = defaultCategories;
  }

  return (
    <div className="categories">
      {displayCategories.map((category, index) => (
        <div
          key={index}
          className={`category ${selectedCategory === category.name ? 'active' : ''}`}
          onClick={() => handleCategoryClick(category.name)}
        >
          <div className="category-icon">{category.icon}</div>
          <span className="category-name">{category.name}</span>
        </div>
      ))}
    </div>
  );
}

function PlaceCard({ business }) {
  // Handle both API data and fallback data
  const businessName = business.business_name || business.name || 'T√™n kh√¥ng c√≥';
  const businessAddress = business.business_address || business.location || 'ƒê·ªãa ch·ªâ kh√¥ng c√≥';
  const businessStatus = business.business_status !== undefined ? business.business_status : business.status;
  const businessImage = business.business_image || business.image;
  const businessRating = business.business_rating || business.rating;
  const businessView = business.business_view || business.view;

  const getStatusText = (status) => {
    if (status === true || status === 'true' || status === 'M·ªü c·ª≠a') return 'M·ªü c·ª≠a';
    if (status === false || status === 'false' || status === 'ƒê√≥ng c·ª≠a') return 'ƒê√≥ng c·ª≠a';
    if (status === 'ƒê√¥ng') return 'ƒê√¥ng';
    return 'Kh√¥ng r√µ';
  };

  const getStatusClass = (status) => {
    if (status === true || status === 'true' || status === 'M·ªü c·ª≠a') return 'status-open';
    if (status === false || status === 'false' || status === 'ƒê√≥ng c·ª≠a') return 'status-closed';
    if (status === 'ƒê√¥ng') return 'status-busy';
    return 'status-busy';
  };

  // Handle image URL
  let imageUrl = '/1.png'; // Default image
  if (businessImage) {
    if (Array.isArray(businessImage) && businessImage.length > 0) {
      imageUrl = businessImage[0];
    } else if (typeof businessImage === 'string') {
      imageUrl = businessImage;
    }
  }

  return (
    <div className="place-card">
      <img 
        src={imageUrl} 
        alt={businessName} 
        className="place-image"
        onError={(e) => {
          e.target.src = '/1.png'; // Fallback image
        }}
      />
      <div className="place-details">
        <h3 className="place-name">{businessName}</h3>
        <p className="place-location">{businessAddress}</p>
        <span className={`status ${getStatusClass(businessStatus)}`}>
          {getStatusText(businessStatus)}
        </span>
        {businessRating && (
          <div className="rating" style={{ margin: '8px 0 4px 0', fontSize: '14px', color: '#ff9800', fontWeight: '500' }}>
            <span>‚≠ê {typeof businessRating === 'number' ? businessRating.toFixed(1) : businessRating}</span>
          </div>
        )}
        {businessView && (
          <div className="views" style={{ margin: '4px 0', fontSize: '12px', color: '#666' }}>
            <span>üëÅÔ∏è {businessView} l∆∞·ª£t xem</span>
          </div>
        )}
      </div>
    </div>
  );
}

function PopularPlaces({ businesses, loading }) {
  if (loading) {
    return (
      <div className="places-grid">
        <div style={{ textAlign: 'center', gridColumn: '1 / -1' }}>
          <p>ƒêang t·∫£i ƒë·ªãa ƒëi·ªÉm...</p>
        </div>
      </div>
    );
  }

  // Fallback data n·∫øu API kh√¥ng c√≥ d·ªØ li·ªáu
  const fallbackPlaces = [
    {
      _id: '1',
      name: 'C√¥ng vi√™n Th·ªëng Nh·∫•t',
      location: 'H√† N·ªôi, Vi·ªát Nam',
      status: 'M·ªü c·ª≠a',
      image: '/1.png',
    },
    {
      _id: '2',
      name: 'Highlands Coffee',
      location: 'H√† N·ªôi, Vi·ªát Nam',
      status: 'ƒê√≥ng c·ª≠a',
      image: '/1.png',
    },
    {
      _id: '3',
      name: 'Th∆∞ vi·ªán Qu·ªëc gia',
      location: 'H√† N·ªôi, Vi·ªát Nam',
      status: 'ƒê√¥ng',
      image: '/1.png',
    },
    {
      _id: '4',
      name: 'AEON Mall',
      location: 'H√† N·ªôi, Vi·ªát Nam',
      status: 'M·ªü c·ª≠a',
      image: '/1.png',
    },
  ];

  const displayPlaces = businesses.length > 0 ? businesses.slice(0, 8) : fallbackPlaces;

  if (displayPlaces.length === 0) {
    return (
      <div className="places-grid">
        <div style={{ textAlign: 'center', gridColumn: '1 / -1' }}>
          <p>Kh√¥ng t√¨m th·∫•y ƒë·ªãa ƒëi·ªÉm n√†o.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="places-grid">
      {displayPlaces.map((business) => (
        <PlaceCard key={business._id || business.id} business={business} />
      ))}
    </div>
  );
}

function HowItWorks() {
  const examplePlaces = [
    {
      name: 'Qu√°n Bar Trendy',
      status: 'ƒê√¥ng',
      image: '/1.png',
    },
    {
      name: 'Nh√† h√†ng Bi·ªÉn',
      status: 'M·ªü c·ª≠a',
      image: '/1.png',
    },
  ];

  return (
    <div className="how-it-works">
      <div className="how-it-works-text">
        <h2>C√°ch th·ª©c ho·∫°t ƒë·ªông</h2>
        <p>
          T√¨m ki·∫øm m·ªôt ƒë·ªãa ƒëi·ªÉm ƒë·ªÉ xem tr·∫°ng th√°i th·ª±c t·∫ø c·ªßa n√≥, ch·∫≥ng h·∫°n nh∆∞ ƒëang m·ªü c·ª≠a,
          ƒë√≥ng c·ª≠a ho·∫∑c ƒë√¥ng kh√°ch. T·∫•t c·∫£ d·ªØ li·ªáu ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª´ h·ªá th·ªëng.
        </p>
      </div>

      <div className="example-cards">
        {examplePlaces.map((place, index) => (
          <div key={index} className="example-card">
            <img src={place.image} alt={place.name} className="place-image" />
            <div className="place-details">
              <h3 className="place-name">{place.name}</h3>
              <span
                className={`status status-${place.status === 'ƒê√¥ng' ? 'busy' : 'open'}`}
              >
                {place.status}
              </span>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

function WhatsHot({ businesses }) {
  // Fallback data
  const fallbackHotPlaces = [
    {
      _id: 'hot1',
      name: 'Highlands Coffee',
      location: 'H√† N·ªôi, Vi·ªát Nam',
      status: 'ƒê√¥ng',
      image: '/1.png',
      isNew: true,
    },
    {
      _id: 'hot2',
      name: 'Nh√† h√†ng Bi·ªÉn',
      location: 'H√† N·ªôi, Vi·ªát Nam',
      status: 'M·ªü c·ª≠a',
      image: '/1.png',
      isNew: false,
    },
    {
      _id: 'hot3',
      name: 'Kh√°ch s·∫°n M∆∞·ªùng Thanh',
      location: 'H√† N·ªôi, Vi·ªát Nam',
      status: 'M·ªü c·ª≠a',
      image: '/1.png',
      isNew: true,
    },
  ];

  // L·∫•y c√°c ƒë·ªãa ƒëi·ªÉm c√≥ rating cao ho·∫∑c view nhi·ªÅu t·ª´ API
  let hotPlaces = [];
  if (businesses && businesses.length > 0) {
    hotPlaces = businesses
      .filter(business => 
        (business.business_rating && business.business_rating > 4) || 
        (business.business_view && business.business_view > 100)
      )
      .slice(0, 6);
  }

  // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu t·ª´ API, d√πng fallback
  if (hotPlaces.length === 0) {
    hotPlaces = fallbackHotPlaces;
  }

  return (
    <div className="whats-hot">
      <h2>ƒêi·ªÉm ƒë·∫øn hot nh·∫•t hi·ªán nay</h2>

      <div className="hot-grid">
        {hotPlaces.map((business) => (
          <div key={business._id || business.id} className="place-card" style={{ position: 'relative' }}>
            <div 
              className="new-tag" 
              style={{ 
                position: 'absolute', 
                top: '8px', 
                left: '8px', 
                backgroundColor: '#ff4444', 
                color: 'white', 
                padding: '4px 8px', 
                fontSize: '12px', 
                fontWeight: '500', 
                borderRadius: '4px', 
                zIndex: 1 
              }}
            >
              Hot
            </div>
            <PlaceCard business={business} />
          </div>
        ))}
      </div>
    </div>
  );
}

export default LandingPage;